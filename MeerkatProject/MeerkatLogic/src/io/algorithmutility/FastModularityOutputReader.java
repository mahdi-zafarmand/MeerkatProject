package io.algorithmutility;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

/**
 *
 * @author aabnar
 */
public class FastModularityOutputReader {

    /**
     * Parse the step value (as dictated by the Fast Mod executable) from a
     * file. <br/>
     * <br/>
     * This value is used in the second run of the algorithm.
     *
     * @param filename - The file to find the step value.
     * @return - The step value.
     */
    public static String getStepValue(String filename) {
        String step = "";
        System.out.println(filename);
        File f = new File(filename);
        try {
            @SuppressWarnings("resource")
            BufferedReader reader = new BufferedReader(new FileReader(f));
            String find = "STEP";
            String line = "";
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.contains(find)) {
                    step = line.split(":")[1].trim();
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(
                    "Fast Modularity could not be run on this graph. This error is display if the graph is disconnected or collapsed. Please try a different algorithm");
        }
        return step;
    }

    /**
     * Parse the communities from the file generated by the executable's second
     * run.
     *
     * @param filename - The file from which to read the communities.
     * @return - A list of communities.
     */
    public static List<List<Integer>> parseCommunities(String filename) {
        List<List<Integer>> communities = new LinkedList<>();
        File f = new File(filename);
        try {
            @SuppressWarnings("resource")
            BufferedReader reader = new BufferedReader(new FileReader(f));
            String find = "GROUP";
            String line = reader.readLine();
            List<Integer> lstCommunity = new LinkedList<>();
            while (line != null) {
                line = line.trim();
                if (line.contains(find)) {
                    // add the previous GROUP of vertices- a community
                    if (!lstCommunity.isEmpty()) {
                        communities.add(lstCommunity);
                    }
                    lstCommunity = new LinkedList<>();
                    line = reader.readLine();
                    continue;
                } else {
                    lstCommunity.add(Integer.parseInt(line));
                }
                line = reader.readLine();
            }
            // Add the last GROUP of vertices- a community
            if (!lstCommunity.isEmpty()) {
                communities.add(lstCommunity);
            }
        } catch (IOException e) {
			//throw new RuntimeException(
            //		"Fast Modularity could not be run on this graph. This error is display if the graph is disconnected or collapsed. Please try a different algorithm");
        }
        return communities;
    }
}
